# GitHub Actions 워크플로우의 이름을 지정합니다.
name: Deploy to Server

# 워크플로우가 트리거될 이벤트를 지정합니다.
on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행됩니다.

jobs:
  # Build 작업 상세 설명 - 이 작업은 코드를 빌드하고 배포에 필요한 파일을 준비하는 단계입니다.
  build:
    # 설명: 이 작업이 실행될 가상 환경을 지정합니다. 가장 최신 버전의 Ubuntu 리눅스 환경에서 코드를 빌드하겠다는 의미입니다. GitHub Actions는 이 환경을 자동으로 제공합니다.
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code : 설명: GitHub 리포지토리에 있는 소스 코드를 가상 환경으로 가져오는(체크아웃하는) 단계입니다.
      # 이 단계를 통해 워크플로우가 빌드에 필요한 모든 파일을 접근할 수 있게 됩니다.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK 17을 설치합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Grant execute permission for gradlew : .gradlew 파일은 Gradle 빌드를 실행하는 스크립트입니다.
      #    리눅스 환경에서는 이 파일에 **실행 권한(+x)**을 명시적으로 부여해야 합니다. 이 단계를 통해 gradlew 파일을 실행 가능한 상태로 만듭니다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Build with Gradle : gradlew build 명령어를 사용하여 프로젝트를 빌드합니다.
      # --no-daemon 옵션은 빌드가 끝난 후 Gradle 데몬(백그라운드 프로세스)을 즉시 종료하도록 하여, 가상 환경 리소스를 효율적으로 사용하게 합니다.
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      # 5. Upload artifact: 빌드 결과물인 JAR 파일(.jar)을 **'아티팩트(artifact)'**로 저장하는 단계입니다.
      # 아티팩트는 한 작업(여기서는 build)의 결과물을 다른 작업(여기서는 deploy)이 사용할 수 있도록 임시로 보관하는 저장소 역할을 합니다.
      # path는 빌드된 JAR 파일이 위치한 경로를 지정합니다.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: service/collector/build/libs/*.jar

  # Deploy 작업 상세 설명 - 이 작업은 빌드된 파일을 서버에 전송하고 실행하는 단계입니다.
  deploy:
    # needs: build: 이 작업이 build 작업이 성공적으로 완료된 후에만 실행되도록 종속성을 설정합니다. 만약 빌드에 실패하면 배포 작업은 시작되지 않습니다.
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download artifact : build 작업에서 업로드했던 아티팩트를 이 가상 환경으로 다운로드합니다. 이 단계를 통해 배포할 JAR 파일을 확보합니다.
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      # Transfer JAR to server (SCP):
      # 설명:  scp-action이라는 외부 액션을 사용하여 다운로드한 JAR 파일을 원격 서버로 **안전하게 전송(scp)**합니다.
      # 이 단계에서 secrets으로 관리되는 서버 접속 정보(호스트, 사용자명, SSH 키)를 사용합니다.
      # 보안을 위해 중요한 정보는 절대로 코드에 직접 노출시키지 않고, GitHub Secrets에 저장해야 합니다.
      - name: Transfer JAR to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.jar"
          target: "/root/" # 서버의 배포 디렉토리

      # 3. Execute deployment script on server (SSH): # #
      # ssh-action이라는 외부 액션을 사용하여 원격 서버에 접속(ssh)한 후, 미리 정의된 배포 스크립트(script)를 실행합니다.
      # 이 스크립트는 일반적으로 다음의 역할을 수행합니다.
      - name: Execute deployment script on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /root
            
            pkill -f 'collector-service.jar' || true
            
            nohup java -jar \
            -Dspring.profiles.active=prod \
            -Dspring.datasource.url=jdbc:mysql://${{ secrets.SERVER_HOST }}:3306/Glemoa \
            -Dspring.datasource.username=${{ secrets.DB_USERNAME }} \
            -Dspring.datasource.password=${{ secrets.DB_PASSWORD }} \
            collector-service.jar > app.log 2>&1 &
            
            echo "Deployment script executed."
